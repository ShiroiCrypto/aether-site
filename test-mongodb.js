require('dotenv').config();
const { MongoClient } = require('mongodb');

async function testMongoDBConnection() {
  const uri = process.env.MONGODB_URI;
  
  if (!uri) {
    console.log('‚ùå MONGODB_URI n√£o configurada');
    return;
  }
  
  console.log('üß™ Testando conex√£o MongoDB...');
  console.log('üì° URI:', uri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));
  
  // Teste 1: Configura√ß√£o padr√£o
  console.log('\nüîç Teste 1: Configura√ß√£o padr√£o');
  try {
    const client1 = new MongoClient(uri, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 10000
    });
    await client1.connect();
    console.log('‚úÖ Conex√£o padr√£o: SUCESSO');
    await client1.close();
  } catch (error) {
    console.log('‚ùå Conex√£o padr√£o: FALHA');
    console.log('   Erro:', error.message);
  }
  
  // Teste 2: Com TLS expl√≠cito
  console.log('\nüîç Teste 2: Com TLS expl√≠cito');
  try {
    const client2 = new MongoClient(uri, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 10000,
      tls: true,
      tlsAllowInvalidCertificates: false,
      tlsAllowInvalidHostnames: false
    });
    await client2.connect();
    console.log('‚úÖ Conex√£o com TLS: SUCESSO');
    await client2.close();
  } catch (error) {
    console.log('‚ùå Conex√£o com TLS: FALHA');
    console.log('   Erro:', error.message);
  }
  
  // Teste 3: Sem TLS
  console.log('\nüîç Teste 3: Sem TLS');
  try {
    const client3 = new MongoClient(uri, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 10000,
      tls: false
    });
    await client3.connect();
    console.log('‚úÖ Conex√£o sem TLS: SUCESSO');
    await client3.close();
  } catch (error) {
    console.log('‚ùå Conex√£o sem TLS: FALHA');
    console.log('   Erro:', error.message);
  }
  
  // Teste 4: Configura√ß√£o completa
  console.log('\nüîç Teste 4: Configura√ß√£o completa');
  try {
    const client4 = new MongoClient(uri, {
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 45000,
      maxPoolSize: 10,
      minPoolSize: 1,
      maxIdleTimeMS: 30000,
      retryWrites: true,
      w: 'majority',
      tls: true,
      tlsAllowInvalidCertificates: false,
      tlsAllowInvalidHostnames: false
    });
    await client4.connect();
    console.log('‚úÖ Conex√£o completa: SUCESSO');
    
    // Testar opera√ß√£o b√°sica
    const db = client4.db('aether');
    const collections = await db.listCollections().toArray();
    console.log('üìä Cole√ß√µes encontradas:', collections.length);
    
    await client4.close();
  } catch (error) {
    console.log('‚ùå Conex√£o completa: FALHA');
    console.log('   Erro:', error.message);
  }
  
  console.log('\nüèÅ Testes conclu√≠dos');
}

testMongoDBConnection().catch(console.error); 